(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"5pGK":function(e,t,o){e.exports={buttonGreen:"call-to-action-module--button-green--1tcEk",buttonBlack:"call-to-action-module--button-black--3WFHG"}},Yl76:function(e,t,o){e.exports={container:"code-corona-label-module--container--2-Zom",code:"code-corona-label-module--code--2K9bE",button:"code-corona-label-module--button--3t74O"}},ZXdF:function(e,t,o){"use strict";o("q1tI");var n=o("5pGK"),c=o.n(n),a=o("qKvR"),r=function(e){var t,o=e.color,n=e.text,r=e.path;return Object(a.c)("div",null,Object(a.c)("a",((t={href:""}).href=r,t),"green"===o?Object(a.c)("button",{className:c.a.buttonGreen},n):Object(a.c)("button",{className:c.a.buttonBlack},n)))};t.a=r,void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"TCButton",filename:"src/components/button.js"}}),void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"TCButton",filename:"src/components/button.js"}})},ciLz:function(e,t,o){"use strict";o.r(t);o("q1tI");var n=o("pRzQ"),c=o("ZXdF"),a=o("Yl76"),r=o.n(a),l=o("qKvR"),s=function(){return Object(l.c)("div",{className:r.a.container},Object(l.c)("div",{className:r.a.code},Object(l.c)(n.a,null)),Object(l.c)("div",{className:r.a.button},Object(l.c)(c.a,{color:"black",text:"BACK",path:"/easy-to-use"})))};t.default=s,void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"CodeCoronaImport",filename:"src/pages/code-corona-import.js"}}),void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"CodeCoronaImport",filename:"src/pages/code-corona-import.js"}})},pRzQ:function(e,t,o){"use strict";o("q1tI");var n=o("qKvR"),c=function(){return Object(n.c)("pre",null,Object(n.c)("span",{style:{color:"orange"}},"\n    private void "),Object(n.c)("span",{style:{color:"cornsilk"}},"fillData()")," {\n\n        confirmedList.clear();\n        recoveredList.clear();\n        deathsList.clear();\n        ",Object(n.c)("span",{style:{color:"grey"}},"\n        // Getting the information and filling the lists used to fill the CoronaChart"),Object(n.c)("span",{style:{color:"orange"}},"\n        if "),"(!offlineCheck.isChecked())\n            response = getCoronavirusData(\n              ",Object(n.c)("span",{style:{color:"lightgreen"}},'"https://coronavirus-map.p.rapidapi.com/v1/summary/latest"'),", \n              HttpStream.",Object(n.c)("span",{style:{color:"cornflowerblue"}},"GET"),"\n              );",Object(n.c)("span",{style:{color:"orange"}},"\n        else"),"\n            response = ",Object(n.c)("span",{style:{color:"orange"}},"new "),"JSONObject(",Object(n.c)("span",{style:{color:"orange"}},"new "),"String(Vm.getFile(",Object(n.c)("span",{style:{color:"lightgreen"}},'"request.json"'),")));\n\n        JSONObject data = response.getJSONObject(",Object(n.c)("span",{style:{color:"lightgreen"}},'"data"'),");\n        dates = data.names();\n        array = data.toJSONArray(dates);\n        ",Object(n.c)("span",{style:{color:"orange"}},"for "),"(",Object(n.c)("span",{style:{color:"orange"}},"int "),"i = ",Object(n.c)("span",{style:{color:"cornflowerblue"}},"0"),"; i < array.length(); i++) {\n            date = dates.getString(i);\n            item = array.getJSONObject(i);\n            MyDate myDate = ",Object(n.c)("span",{style:{color:"orange"}},"new "),"MyDate(Integer.parseInt(Convert.remove(date, ",Object(n.c)("span",{style:{color:"lightgreen"}},'"-"'),")));\n            confirmedList.add(\n              ",Object(n.c)("span",{style:{color:"orange"}},"new Data"),"<MyDate, Integer>(myDate, item.getInt(",Object(n.c)("span",{style:{color:"lightgreen"}},'"total_cases"'),"))\n              );\n            recoveredList.add(\n              ",Object(n.c)("span",{style:{color:"orange"}},"new Data"),"<MyDate, Integer>(myDate, item.getInt(",Object(n.c)("span",{style:{color:"lightgreen"}},'"recovered"'),"))\n              );\n            deathsList.add(",Object(n.c)("span",{style:{color:"orange"}},"new Data"),"<MyDate, Integer>(myDate, item.getInt(",Object(n.c)("span",{style:{color:"lightgreen"}},'"deaths"'),")));\n        }\n\n        ",Object(n.c)("span",{style:{color:"grey"}},"// Sorts the data by date;"),"\n        Collections.sort(confirmedList, ",Object(n.c)("span",{style:{color:"orange"}},"new Comparator"),"<",Object(n.c)("span",{style:{color:"orange"}},"Data"),"<MyDate, Integer>>() {\n                ",Object(n.c)("span",{style:{color:"orange"}},"\n            @Override\n            public int")," ",Object(n.c)("span",{style:{color:"cornsilk"}},"compare"),"(",Object(n.c)("span",{style:{color:"orange"}},"Data"),"<MyDate, Integer> ",Object(n.c)("span",{style:{color:"plum"}},"o1"),", ",Object(n.c)("span",{style:{color:"orange"}},"Data"),"<MyDate, Integer> ",Object(n.c)("span",{style:{color:"plum"}},"o2"),") {\n                ",Object(n.c)("span",{style:{color:"orange"}},"return")," o1.x.compareTo(o2.x);\n            }\n        });\n        Collections.sort(recoveredList, new Comparator<Data<MyDate, Integer>>() {\n        ",Object(n.c)("span",{style:{color:"orange"}},"\n            @Override\n            public int")," ",Object(n.c)("span",{style:{color:"cornsilk"}},"compare"),"(",Object(n.c)("span",{style:{color:"orange"}},"Data"),"<MyDate, Integer> ",Object(n.c)("span",{style:{color:"plum"}},"o1"),", ",Object(n.c)("span",{style:{color:"orange"}},"Data"),"<MyDate, Integer> ",Object(n.c)("span",{style:{color:"plum"}},"o2"),") {\n                ",Object(n.c)("span",{style:{color:"orange"}},"return")," o1.x.compareTo(o2.x);\n            }\n        });\n        Collections.sort(deathsList, new Comparator<Data<MyDate, Integer>>() {\n        ",Object(n.c)("span",{style:{color:"orange"}},"\n            @Override\n            public int")," ",Object(n.c)("span",{style:{color:"cornsilk"}},"compare"),"(",Object(n.c)("span",{style:{color:"orange"}},"Data"),"<MyDate, Integer> ",Object(n.c)("span",{style:{color:"plum"}},"o1"),", ",Object(n.c)("span",{style:{color:"orange"}},"Data"),"<MyDate, Integer> ",Object(n.c)("span",{style:{color:"plum"}},"o2"),") {\n                ",Object(n.c)("span",{style:{color:"orange"}},"return")," o1.x.compareTo(o2.x);\n            }\n        });\n    }\n    ")};t.a=c,void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"ImportCorona",filename:"src/components/code-snippets/import-corona.js"}}),void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"ImportCorona",filename:"src/components/code-snippets/import-corona.js"}})}}]);
//# sourceMappingURL=component---src-pages-code-corona-import-js-36619568831e7dc31663.js.map